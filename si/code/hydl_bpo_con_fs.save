C --- -------------------------------- HYDLINE  --------------------------------
      SUBROUTINE HYDL_BPO_CON_FS(divtn,w,n,kappa_lam)
C --- Calculation of Balmerlines according to the VCS-Theory
C --- DATA FOR LINE-ABSORPTION COEFFICIENTS
C     BPO version of FRANK CODE IS MAINLY ADOPTED FROM
C                          LYUDMILA MASHONKINA

      INCLUDE 'physcnst.inc'
      INCLUDE 'lf_decl0.inc'

      INTEGER*4 itmp                       ! temporary integer variable
      REAL*8    phi_lam                    ! additional broadened profile at lambda
      REAL*8    phi_lam_tmp                ! temporary buffer
      REAL*4    phi_vcs_tmp(NHW)           ! temporary buffer for line profile
      REAL*4    w_vcs_tmp(NHW)             ! temporary wavelengthpoints of vcs-profile
      REAL*4    dlam4                      ! dlam as REAL*4 variable
      REAL*8    resscale
      PARAMETER (W_HBE = 3.64704 D-05)     ! wavelength of Balmer edge [cm]

      ! BPO NEW VARS AND DATA
      REAL*4 AII(6,7)
      parameter(nlamy=4001)
      common/barklem/ nkeylm,philm(nlamy),wvdw(ndmax),wilm(nlamy)
      DOUBLE PRECISION gammaf,xx
      real philm,wvdw,wilm
      DIMENSION STCOMP(5,4),STALPH(34),
     1          ISTAL(4),LNGHAL(4),STWTAL(34),
     2          STCPWT(5,4),LNCOMP(4)
      DIMENSION  FINEST(14),FINSWT(14)
      REAL*8 dll,wprec,findl,phi,HTOTAL
      dimension finedw(1500),chin(1500),gomega(ndmax)
      common/chieta/ mlhf,chione(ndmax,1500),mldpth(ndmax),nfhalf 
      save
C     from Piskunov subroutine hlinop.f
C     Fine structure components for alpha lines in FREQ*10**-7
C
      DATA STALPH/ -730.,  370.,  188.,  515.,  327.,  619., -772.,
     1             -473., -369.,  120.,  256.,  162.,  285., -161.,
     2             -38.3,  6.82, -174., -147., -101., -77.5,   55.,
     3              126.,   75.,  139.,  -60.,   3.7,   27.,  -69., 
     4              -42.,  -18.,  -5.5,  -9.1,  -33.,  -24./
C
C     Alpha component weights
C
      DATA STWTAL/1.,2.,1.,2.,1.,2.,1.,2.,3.,1.,2.,1.,2.,1.,4.,6.,1.,
     1            2.,3.,4.,1.,2.,1.,2.,1.,4.,6.,1.,7.,6.,4.,4.,4.,5./
      DATA ISTAL /1, 3, 10, 21/
      DATA LNGHAL/2, 7, 11, 14/
C
C    Fine structure for M.EQ.INFINITY IN FREQ*10**-7
C
      DATA STCOMP/   0.,    0.,    0.,    0.,    0.,
     2             468.,  576., -522.,    0.,    0.,
     3             260.,  290.,  -33., -140.,    0.,
     4             140.,  150.,   18.,  -27.,   -51./
C
C  Weights for fine structure components
C
      DATA STCPWT/1., 0., 0., 0., 0.,
     2            1., 1., 2., 0., 0.,
     3            1., 1., 4., 3., 0.,
     4            1., 1., 4., 6., 4./
      DATA LNCOMP/1, 3, 4, 5/
c *** end new
      DATA AII/   0.,        0.,        0.,        0.,        0., 0.,
     *     4.699E+08,        0.,        0.,        0.,        0., 0.,
     *     5.575E+07, 4.410E+07,        0.,        0.,        0., 0.,
     *     1.278E+07, 8.419E+06, 8.986E+06,        0.,        0., 0.,
     *     4.125E+06, 2.530E+06, 2.201E+06, 2.699E+06,        0., 0.,
     *     1.644E+06, 9.732E+05, 7.783E+05, 7.711E+05, 1.010E+06, 0.,
     *            0.,        0.,        0.,        0.,        0., 0./ ! dummies
C            LYMAN     BALMER     PASCHEN    BRACKETT    PFUND


c   ***   for Balmer lines  nbalm=2
      nbalm=2
      xn2=nbalm*nbalm
      conver=w*w/c
      wwing=50.0
      plamor=2*wwing/(nlamy-1)
      IF(mlhf.EQ.0) THEN               ! PRECALCULATIONS 
         WRITE(6,*) 'self-broadening for H_a and H_b according to'
         WRITE(6,*) ' Barklem et al. 2000 A&A 363,1091'
         amu=1.67e-24/2.016
         print *, ' start hydline + fine splitting'
         OPEN(16,file='pfofile_siu.lst')
         IPOS = 3
         WRITE(16,*) ' fine structure components for Halpha'
         DO 102 I = 1,7  ! ALL 7 FS COMPONNETS
            Kbalm = IPOS-1+I
            FINElm = STALPH(Kbalm)*1.D7* conver+wbalmer(1)
            FINff = STWTAL(Kbalm)/XN2/3.D0* balmer_gf(1)/8.0
            write(16,103) FINElm*1.0d8, FINff
 102     CONTINUE
 103     FORMAT(' lambda=',f10.3,'  f_ij=',f12.8)
         ! wavelength (cm) grid for half profile is calculated once
         ! step=0.01 A to 5 A and 0.1 A over the rest profile 
         step1=0.01
         step2=0.1
         nfw1=5.0/step1
         nfw2=(wwing-5.0)/step2
         nfhalf=nfw1+nfw2+1
         DO k=1,nfw1+1
            finedw(k)=(k-1)*step1*1.0e-8
         ENDDO
         DO k=1,nfw2
            finedw(nfw1+1+k)=finedw(nfw1+1)+k*step2*1.0e-8
         ENDDO
         DO k=1,ndmax
            mldpth(k)=0
         ENDDO
         ! self-broadening for H_a and H_b (Barklem et al. 2000 A&A 363,1091)
         ! gomega is dnu 
         ! WVDW is dlam (A) (resonance broadening+radiative damping) for all depth points
         ! -------------------------------------------------------
         jup=2*dsqrt(w/(w-3646.0*1.0d-8))+0.5
         k=jup-nbalm
         phlm= wbalmer(k)*1.0e8
         pwmin=phlm-wwing
         IF(k.eq.2) THEN   ! H_beta
            alpha=0.455
            sigam=2320
            WRITE(*,*) 'THIS IS Hb'
         ELSE             !H_alpha
            alpha=0.677
            sigam=1180
            WRITE(*,*) 'THIS IS Hb'
         ENDIF
         CONVEa=phlm**2/2.99793d18
         xx=(4.-alpha)/2.
         GAMMA_RAD = 0.
         GAMMA_RAD = AII(1,2)
         DO 10 Ilm = 1,k+1
            GAMMA_RAD = GAMMA_RAD + AII(Ilm,k+2)
 10      CONTINUE
         DO idd=1,atm.h.ndepth
            tlm=atm.t(idd)
c                 if(idd.eq.1) write(16,*) tlm
            vvt=sqrt(11.04e-16*tlm/(pi*amu))
c                 if(idd.eq.1) write(16,*) gammf(xx) 
            gvdw3=(4/pi)**(0.5*alpha)*sigam*gammf(xx)/pi*
     &           (vvt/1.0e6)**(1-alpha)*0.8797e-10
c             if(idd.eq.1) write(16,*) idd,atm.pion(idd,1,1)
            gvdw=gvdw3*2.0*atm.pion(idd,1,1)/(kb*tlm) 
            gomega(idd)=GVDW+GAMMA_RAD
            WVDW(idd)=CONVEa*gomega(idd)/12.56671
         ENDDO
        !  -------------------------------------------------------
        ! delta wavelength (A) grid for convolution, full profile 
         DO ilm=1,nlamy
            wilm(ilm)=-wwing+plamor*(ilm-1)
         ENDDO
         mlhf=1
      ENDIF
c ***  end precalculation


      doplm=0.15*1.0e-8
      phi_lam   = 0.                       ! Init
      DO k = balmer_min, balmer_max
        dlam   = DABS(w - wbalmer(k))
        IF (dlam .LE. 2.e-6) THEN
      w2     = w * w
      almsum  = gomega(n) * w2 * DIV_4PIC
      alpha2 = almsum * almsum              
      broad  = almsum / ( (dlam*dlam) + alpha2 ) * DIV_PIC * w2
c                write(16,*) ' id=',idd,' T',tlm,' VdW',gvdw3
      DO i = 1,nhw_nr(k)
         phi_vcs_tmp(i) = phi_vcs(i,n,k)
         w_vcs_tmp(i)   = w_vcs(i,k)
      END DO
c  old recipe for all dlam 
      IF (dlam .gt. wwing*1.e-8) THEN
         dlam4= dlam
         phi_lam_tmp = 
     *        10**QPOL(dlam4,w_vcs_tmp,phi_vcs_tmp,nhw_nr(k),itmp)
         phi_lam = phi_lam + (broad + phi_lam_tmp) * C * balmer_gf(k)
c     new for  dlam < 100 A
      ELSE
         IF(mldpth(n).EQ.0) THEN 
c     precalculation of absorption profile, adding!!! 
            IF(n.EQ.41) THEN
               hmlne=atm.pe(n)/(kb*atm.t(n))
               htotal = atm.pion(n,1,1)/atm.uion(n,1,1)/(kb*atm.t(n))
               WRITE(16,101) atm.t(n),hmlne,htotal
               WRITE(16,*) atm.t(n),hmlne,htotal
               WRITE(16,*) '  log dw(A)    log phi_lam'
c     write(16,*) '  log dw(A)    log broad'
            ENDIF
 101        FORMAT('  T=',f8.0,'  Ne=',e12.4,'  N_H=',e12.4)
            DO idd=1,nfhalf
               dll= finedw(idd)
               dlam4=finedw(idd)
               wprec=wbalmer(k)+dll
               w2     = wprec * wprec
               almsum  = gomega(n) * w2 * DIV_4PIC
               alpha2 = almsum * almsum              
               broad  = almsum / ( (dll*dll) + alpha2 ) * DIV_PIC * w2
               phi_lam_tmp = 10**QPOL(dlam4,w_vcs_tmp,
     &              phi_vcs_tmp,nhw_nr(k),itmp)
               IF(dll.LT.0.1*1.0e-8) broad=0
               phi_lam_tmp = (broad + phi_lam_tmp) 
c     Write(16,*) wilm(1050),philm(1050)
               GO TO 3001
               nkeylm=1
c  ----------------------------------------------------------------             
               ilm0=1
               ilm1=1
               ilm2=nlamy
               DO 1015 ilm=1,nlamy
                  IF(wilm(ilm).LT.(-wwing+0.1)) ilm0=ilm
                  IF(wilm(ilm).LT.dll*1.0e8) ilm1=ilm
                  IF(wilm(ilm).LT.(wwing-0.1)) ilm2=ilm
 1015          CONTINUE
               ilm1=ilm1-2
c            if (n.ne.40) go to 1001
c            if(dlam.lt.2.45e-8.and.dlam.gt.2.35e-8)
c     &        write(16,*) dlam,ilm0,ilm1,ilm2
c            if(dlam.lt.24.5e-8.and.dlam.gt.24.35e-8)
c     &        write(16,*) dlam,ilm0,ilm1,ilm2
c            if(dlam.lt.34.5e-8.and.dlam.gt.34.0e-8)
c     &        write(16,*) dlam,ilm0,ilm1,ilm2
c1001        continue
               sumph1=0
               sumlr=0
               IF(ilm0.GE.ilm1) GO TO 1008
               DO 1016 ilm=ilm0,ilm1
                  aklr=1/(wvdw(n)**2+(dll*1.0e8-wilm(ilm))**2)
                  IF(ilm.EQ.ilm0.OR.ilm.EQ.ilm1) aklr=aklr*0.5
                  sumph1=sumph1+aklr*philm(ilm)*plamor
                  sumlr=sumlr+aklr
 1016          CONTINUE
               sumlr=sumlr*plamor
 1008          CONTINUE
               npoint=1250
               ddlam0=5*plamor/npoint
               sumdop=0
               sumlr1=0
               DO 1018 ilm=1,npoint
                  wlmr=wilm(ilm1)+ddlam0*(ilm-1)
                  aklr=1/(wvdw(n)**2+(dll*1.0e8-wlmr)**2)
                  DO 1010 ilmi=ilm1,nlamy
                     IF(wlmr.LT.wilm(ilmi)) THEN
                        phiint=philm(ilmi-1)+(philm(ilmi)-
     &                       philm(ilmi-1))/plamor*(wlmr-wilm(ilmi-1))
                        GO TO 1012
                     ENDIF
 1010             CONTINUE
 1012             CONTINUE
                  IF(ilm.EQ.1.OR.ilm.EQ.(npoint+1)) akrl=akrl*0.5
                  sumdop=sumdop+phiint*aklr*ddlam0
                  sumlr1=sumlr1+aklr
 1018          CONTINUE
               sumlr1=sumlr1*ddlam0
               sumlr=sumlr+sumlr1
               sumph2=0
               sumlr2=0
               IF((ilm1+5).GE.ilm2) GO TO 1007
               DO 1017 ilm=ilm1+5,ilm2
                  aklr=1/(wvdw(n)**2+(dll*1.0e8-wilm(ilm))**2)
                  IF(ilm.EQ.(ilm1+3).OR.ilm.EQ.ilm2) aklr=aklr*0.5
                  sumph2=sumph2+aklr*philm(ilm)*plamor
                  sumlr2=sumlr2+aklr
 1017          CONTINUE
               sumlr2=sumlr2*plamor
 1007          CONTINUE
               sumlr=sumlr+sumlr2
               phi_lam_tmp=(sumph1+sumdop+sumph2)/sumlr
 3001          CONTINUE
               chione(n,idd)=phi_lam_tmp * C * balmer_gf(k)
               chin(idd)=chione(n,idd)
            ENDDO
            mldpth(n)=1
            phi_lam = phi_lam +ft4(dlam,nfhalf,finedw,chin)
         ELSE
            DO ilm=1,nfhalf
               chin(ilm)=chione(n,ilm)
            ENDDO
            mbalm=nbalm+k
            MMN=mbalm-nbalm
            IF (Nbalm.GT.4 .OR. Mbalm.GT.10) THEN
               IFINS = 1
               FINEST(1) = 0.
               FINSWT(1) = 1.
            ELSE IF (MMN.GT.1) THEN
               IFINS = LNCOMP(Nbalm)
               DO 1 I = 1,IFINS
                  FINEST(I) = STCOMP(I, Nbalm)*1.D7
                  FINSWT(I) = STCPWT(I, Nbalm)/XN2
 1             CONTINUE
            ELSE
C     
C     eg: Ly alpha IFINS=2, IPOS=1, FINEST=-7.3E9,3.7E9, FINSWT=1/3, 2/3
C
               IFINS = LNGHAL(Nbalm)
               IPOS = ISTAL(Nbalm)
               DO 2 I = 1,IFINS
                  Kbalm = IPOS-1+I
                  FINEST(I) = STALPH(Kbalm)*1.D7
                  FINSWT(I) = STWTAL(Kbalm)/XN2/3.D0
 2             CONTINUE
            END IF
c     sum of fine splitting components
            dwave=w - wbalmer(k)
            HTOTAL = 0.0
            DO 3 I = 1,IFINS
               findl=FINEST(I)*CONVER
               Dll = dabs(dwave-FINdl)
               phi=ft4(dll,nfhalf,finedw,chin)*FINSWT(I)
               HTOTAL = HTOTAL + phi
 3          CONTINUE
            if(n.eq.41.and.dwave.gt.0.0) 
     &           write(16,104) 
     &                 w*1.0d8,dlog10(dwave*1.0d8),dlog10(htotal) 
 104        format(3f12.4)
            phi_lam = phi_lam + HTOTAL
         ENDIF 
      ENDIF
      ENDIF
      END DO        
      IF (phi_lam.EQ.0.) RETURN 
      kappa_lam = fh(n) * phi_lam
      kappa_lam = kappa_lam * EXP(-(H_E2_DIV_K * divtn))
      RETURN
      END
c --------------------------------
      DOUBLE PRECISION FUNCTION GAMMf(XX)
      DOUBLE PRECISION XX,GX,X,Y,GY
      DATA ERR/1.E-6/, ARGFCT/57./
      IF (XX-ARGFCT)  6,6,4
 4    IER=2
      GO TO 200
 6    X=XX
      GX=1.0
      IF(X-2.0)50,50,15
 10   IF(X-2.0)110,110,15
 15   X=X-1.0
      GX=GX*X
      GO TO 10
 50   IF(X-1.0)60,120,110
 60   IF(X-ERR)62,62,80
 62   Y = FLOAT(INT(X))-X
      IF(ABS(Y)-ERR)130,130,64
 64   IF(1.0-Y-ERR)130,130,70
 70   IF(X-1.0)80,80,110
 80   GX=GX/X
      X=X+1.0
      GO TO 70
 110  Y=X-1.0
      GY=1.0+Y*(-0.5771017+Y*(+0.9858540+Y*(-0.8764218+Y*(+0.8328212+
     1 Y*(-0.5684729+Y*(+0.2548205+Y*(-0.05149930)))))))
      GX=GX*GY
 120  GAMMf = GX
      RETURN
 130  IER=1
 200  PRINT 210, IER
      STOP
 210  FORMAT(7H  ERROR,I3,18H IN FUNCTION GAMMA)
      END


      real*8 FUNCTION FT4(T,N,X,F)
************************************************************************
      real*8 t
      DIMENSION X(N),F(N)
      DO 1 J=1,N
         I=J
         IF (T-X(J)) 3,2,1
    2    FT=F(J)
         RETURN
    1 CONTINUE
    3 IF (I.EQ.1) I=2
      IF (I.GE.N) I=N
      FT4=F(I-1)+(F(I)-F(I-1))*(T-X(I-1))/(X(I)-X(I-1))
      RETURN
      END





















c---------------------
C      phi_lam   = 0.                       ! Init
C      DO k = balmer_min, balmer_max
C        dlam   = DABS(w - wbalmer(k))
C        IF (dlam .LE. 2.e-6) THEN
C          DO i = 1,nhw_nr(k)
C            phi_vcs_tmp(i) = phi_vcs(i,n,k)
C            w_vcs_tmp(i)   = w_vcs(i,k)   
C          END DO
C          dlam4= dlam
C          phi_lam_tmp = 
C     *     10**QPOL(dlam4,w_vcs_tmp,phi_vcs_tmp,nhw_nr(k),itmp)
C          IF (k.LE.5) THEN
C            CALL RESON_RADIA (k,w,dlam,n,divtn,broad)
C          ELSE
C            broad = 0.
C          ENDIF
C          phi_lam = phi_lam + 
C     *              (broad * resscale + phi_lam_tmp ) * C * balmer_gf(k)
C       ENDIF
C      END DO        
C      IF (phi_lam.EQ.0.) RETURN 
C      kappa_lam = fh(n) * phi_lam
C      kappa_lam = kappa_lam * EXP(-(H_E2_DIV_K * divtn))
C      RETURN
C      END
